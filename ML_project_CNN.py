# -*- coding: utf-8 -*-
"""ML_project_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yOr-O5dggs9HNQW66ARKa9DDhAC4rcXY
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import os
# %matplotlib inline
from keras import regularizers
from PIL import Image
import glob
from keras.datasets import mnist
from keras.layers import Dropout
from matplotlib import pyplot as plt
from keras.callbacks import EarlyStopping
import keras
from sklearn.metrics import precision_recall_fscore_support, confusion_matrix

from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.utils import to_categorical
from keras import initializers
from keras import optimizers
from matplotlib import pyplot
import pandas as pd
from keras.datasets import cifar10
from keras.layers.normalization import BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.utils import plot_model
import glob
from IPython.display import SVG, Image
import tensorflow as tf
from keras.callbacks import ModelCheckpoint
from keras.models import load_model
from tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D
from tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D
from tensorflow.keras.models import Model, Sequential
from keras.preprocessing.image import ImageDataGenerator
import cv2

rock=glob.glob("/content/drive/MyDrive/train/rock/*")
reggae=glob.glob("/content/drive/MyDrive/train/reggae/*")
pop=glob.glob("/content/drive/MyDrive/train/pop/*")
metal=glob.glob("/content/drive/MyDrive/train/metal/*")
jazz=glob.glob("/content/drive/MyDrive/train/jazz/*")
hiphop=glob.glob("/content/drive/MyDrive/train/hiphop/*")
disco=glob.glob("/content/drive/MyDrive/train/disco/*")
country=glob.glob("/content/drive/MyDrive/train/country/*")
classical=glob.glob("/content/drive/MyDrive/train/classical/*")
blues=glob.glob("/content/drive/MyDrive/train/blues/*")
## path for images

rock_path=[]
rock_image=[]
rock_label=[]
for path in rock:
    # print("hello",a)
    # pa=str(path.split("\\")[0])+"/"
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    rock_path.append(pa)
    rock_image.append(im)
    rock_label.append(1)

reggae_path=[]
reggae_image=[]
reggae_label=[]
for path in reggae:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    reggae_path.append(pa)
    reggae_image.append(im)
    reggae_label.append(2)

pop_path=[]
pop_image=[]
pop_label=[]
for path in pop:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    pop_path.append(pa)
    pop_image.append(im)
    pop_label.append(3)

metal_path=[]
metal_image=[]
metal_label=[]
for path in metal:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    metal_path.append(pa)
    metal_image.append(im)
    metal_label.append(4)

jazz_path=[]
jazz_image=[]
jazz_label=[]
for path in jazz:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    jazz_path.append(pa)
    jazz_image.append(im)
    jazz_label.append(5)

hiphop_path=[]
hiphop_image=[]
hiphop_label=[]
for path in hiphop:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    hiphop_path.append(pa)
    hiphop_image.append(im)
    hiphop_label.append(6)

disco_path=[]
disco_image=[]
disco_label=[]
for path in disco:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    disco_path.append(pa)
    disco_image.append(im)
    disco_label.append(7)

country_path=[]
country_image=[]
country_label=[]
for path in country:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    country_path.append(pa)
    country_image.append(im)
    country_label.append(8)

classical_path=[]
classical_image=[]
classical_label=[]
for path in classical:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    classical_path.append(pa)
    classical_image.append(im)
    classical_label.append(9)

blues_path=[]
blues_image=[]
blues_label=[]
for path in blues:
    a = path.split("/")
    pa="/"+a[1]+"/"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"
    im=a[6]
    blues_path.append(pa)
    blues_image.append(im)
    blues_label.append(10)

rockframe = pd.DataFrame()
rockframe["path"]=rock_path
rockframe["image"]=rock_image
rockframe["label"]=rock_label
print("total rock images label 1",rockframe.shape[0])
#rockframe.head(10)

reggaeframe = pd.DataFrame()
reggaeframe["path"]=reggae_path
reggaeframe["image"]=reggae_image
reggaeframe["label"]=reggae_label
print("total reggae images label 2",reggaeframe.shape[0])
#reggaeframe.head(10)

popframe = pd.DataFrame()
popframe["path"]=pop_path
popframe["image"]=pop_image
popframe["label"]=pop_label
print("total pop images label 3",popframe.shape[0])
#popframe.head(10)

metalframe = pd.DataFrame()
metalframe["path"]=metal_path
metalframe["image"]=metal_image
metalframe["label"]=metal_label
print("total metal images label 4",metalframe.shape[0])
#metalframe.head(10)

jazzframe = pd.DataFrame()
jazzframe["path"]=jazz_path
jazzframe["image"]=jazz_image
jazzframe["label"]=jazz_label
print("total jazz images label 5",jazzframe.shape[0])
#jazzframe.head(10)

hiphopframe = pd.DataFrame()
hiphopframe["path"]=hiphop_path
hiphopframe["image"]=hiphop_image
hiphopframe["label"]=hiphop_label
print("total hiphop images label 6",hiphopframe.shape[0])
#hiphopframe.head(10)

discoframe = pd.DataFrame()
discoframe["path"]=disco_path
discoframe["image"]=disco_image
discoframe["label"]=disco_label
print("total disco images label 7",discoframe.shape[0])
#discoframe.head(10)

countryframe = pd.DataFrame()
countryframe["path"]=country_path
countryframe["image"]=country_image
countryframe["label"]=country_label
print("total country images label 8",countryframe.shape[0])
#countryframe.head(10)

classicalframe = pd.DataFrame()
classicalframe["path"]=classical_path
classicalframe["image"]=classical_image
classicalframe["label"]=classical_label
print("total classical images label 9",classicalframe.shape[0])
#classicalframe.head(10)

bluesframe = pd.DataFrame()
bluesframe["path"]=blues_path
bluesframe["image"]=blues_image
bluesframe["label"]=blues_label
print("total blues images label 10",bluesframe.shape[0])
#bluesframe.head(10)

total_images=(rockframe.shape[0]+reggaeframe.shape[0]+popframe.shape[0]+metalframe.shape[0]+jazzframe.shape[0]+hiphopframe.shape[0]+discoframe.shape[0]+countryframe.shape[0]+classicalframe.shape[0]+bluesframe.shape[0])
print("total images",total_images)
arr=[1,2,3,4,5,6,7,8,9,10]
counts=[rockframe.shape[0],reggaeframe.shape[0],popframe.shape[0],metalframe.shape[0],jazzframe.shape[0],hiphopframe.shape[0],discoframe.shape[0],countryframe.shape[0],classicalframe.shape[0],bluesframe.shape[0]]

train_set=pd.concat([rockframe,reggaeframe,popframe,metalframe,jazzframe,hiphopframe,discoframe,countryframe,classicalframe,bluesframe])
sns.countplot(x = "label", data = train_set)
plt.title("distribution of data")
plt.grid()
#plt.plot(arr,counts)

from google.colab import drive
drive.mount('/content/drive')

train_set=train_set.sample(frac=1).reset_index(drop=True)
train_set.reset_index(inplace = True, drop = True)
train_set.head()

plt.figure(0, figsize=(20,20))
for i in range(1,11):
    plt.subplot(2,5,i)
    path=os.path.join(train_set['path'][i],train_set['image'][i])
    img=cv2.imread(path)
    plt.imshow(img)

input_size = cv2.imread(os.path.join(rockframe['path'][0],rockframe['image'][0]),0).shape[0]
batch_size = 32

cv2.imread(os.path.join(rockframe['path'][0],rockframe['image'][0]),0).shape

datagen_train = ImageDataGenerator(horizontal_flip=True)

X_train = datagen_train.flow_from_directory("/content/drive/MyDrive/train/",target_size=(288,432),color_mode="grayscale",
                                                    batch_size=batch_size,
                                                    class_mode='categorical',
                                                    shuffle=True) #shuffling for generalization

datagen_validation = ImageDataGenerator(horizontal_flip=True)
X_valid = datagen_validation.flow_from_directory("/content/drive/MyDrive/test/",target_size=(288,432),color_mode="grayscale",
                                                    batch_size=batch_size,
                                                    class_mode='categorical',
                                                    shuffle=False) #no need to shuffle testing

total_test=X_valid.n
print("testing data",total_test)
print("training data",X_train.n)

num_genres=10
input_shape=(288,432,1)
model = Sequential()
model.add(Conv2D(128,(3,3), padding='same', input_shape=(288, 432,1)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(3,3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(256,(3,3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(512,(3,3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(256))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))

model.add(Dense(512))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))

model.add(Dense(10, activation='softmax'))
# model.load_weights("model_weights_new.h5")
adam = Adam(lr=0.001)
model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

# from livelossplot.tf_keras import PlotLossesCallback

check_point = ModelCheckpoint("model_weights_new.h5", monitor='val_accuracy',save_weights_only=True, mode='max', verbose=1)
adapt_rate= ReduceLROnPlateau(monitor='val_loss', factor=0.2,patience=4, min_lr=0.00005, mode='auto')
callbacks = [check_point, adapt_rate]

steps_involved_train=int(total_images/batch_size)
steps_involved_test=int(total_test/batch_size)

model.fit(x=X_train,
          steps_per_epoch=steps_involved_train,
          epochs=20,
          validation_data = X_valid,
          validation_steps = steps_involved_test,
          callbacks=callbacks)